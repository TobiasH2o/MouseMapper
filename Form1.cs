using Microsoft.Win32.TaskScheduler;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace MouseMapper
{
    public partial class Main : Form
    {
        Settings settingsWindow;
        private List<Point> dataPoints = new List<Point>();
        private bool dispose = false;
        Timer logMouseTimer = new Timer();
        Timer repaintTimer = new Timer();

        public Main()
        {
            settingsWindow = new Settings();
            InitializeComponent();
            draw.Paint += new PaintEventHandler(paintLines);
            FormClosing += new FormClosingEventHandler(hide);


            if (isTask()) launchButton.Text = "ON";
            logMouseTimer.Interval = 5;
            logMouseTimer.Tick += new EventHandler(addNewMouse);
            logMouseTimer.Enabled = true;
            logMouseTimer.Start();

            repaintTimer.Interval = 25;
            repaintTimer.Tick += new EventHandler(repaint);
            repaintTimer.Enabled = true;
            repaintTimer.Start();

        }

        private bool isTask()
        {
            return new TaskService().FindAllTasks(new System.Text.RegularExpressions.Regex("tfhMouseLogger")).Length > 0;
        }

        private void deleteTask()
        {
            new TaskService().RootFolder.DeleteTask("tfhMouseLogger");
        }

        private void makeTask()
        {
            using (TaskService ts = new TaskService())
            {
                TaskDefinition td = ts.NewTask();
                td.RegistrationInfo.Description = "This task was auto generated by MouseMapper.";
                td.Triggers.Add(new LogonTrigger { Delay = TimeSpan.FromSeconds(5), UserId = System.Security.Principal.WindowsIdentity.GetCurrent().Name });
                td.Actions.Add(new ExecAction("notepad.exe"));
                ts.RootFolder.RegisterTaskDefinition(@"tfhMouseLogger", td);
            }
        }


        private void addNewMouse(object sender, EventArgs e)
        {
            addLine(Cursor.Position.X, Cursor.Position.Y);
        }

        private void repaint(Object sender, EventArgs e)
        {
            Refresh();
        }

        public void addLine(int x, int y)
        {
            var s = Screen.FromControl(this).Bounds;
            int xP = (int)(x * ((double)draw.Size.Width / (double)s.Width));
            int yP = (int)(y * ((double)draw.Size.Height / (double)s.Height));
            dataPoints.Add(new Point(xP, yP));
        }

        private void paintLines(object sender, PaintEventArgs e)
        {
            settingsWindow.printMethod(sender, e, dataPoints);
        }


        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void updateLabel(Object sender, EventArgs e)
        {

        }

        private void openSettings_Click(object sender, EventArgs e)
        {
            settingsWindow.Show();
        }

        private void launchButton_Click(object sender, EventArgs e)
        {
            if (isTask()) deleteTask();
            else makeTask();

            if (isTask()) launchButton.Text = "ON";
            else launchButton.Text = "OFF";
        }

        private void hide(object sender, FormClosingEventArgs e)
        {
            if (!dispose) { 
                this.Hide();
            notifyIcon1.Visible = true;
            e.Cancel = true;
            }
        }

        private void quitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dispose = true;
            Dispose();
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Show();
            WindowState = FormWindowState.Normal;
            notifyIcon1.Visible = false;
        }

        private void pauseLoggingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (logMouseTimer.Enabled)
            {
                logMouseTimer.Stop();
                pauseLoggingToolStripMenuItem.Text = "Start Logging";
            }
            else
            {
                logMouseTimer.Start();
                pauseLoggingToolStripMenuItem.Text = "Stop Logging";
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (logMouseTimer.Enabled)
            {
                logMouseTimer.Stop();
                button1.Text = "Start Logging";
            }
            else
            {
                logMouseTimer.Start();
                button1.Text = "Stop Logging";
            }
        }

    }
}
